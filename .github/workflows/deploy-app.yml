name: Deploy Aggregator (Docker + GHCR )

on:
  push:
    branches: ["main", "fix-15-sept-config-service"]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Override image tag to deploy (default: commit SHA)"
        required: true
        default: "latest"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  REMOTE_USER: ${{ secrets.REMOTE_USER }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_SSH_PORT: ${{ secrets.REMOTE_SSH_PORT }}
  GHCR_USER: ${{ secrets.GHCR_USERNAME }}
  GHCR_PAT: ${{ secrets.GHCR_PAT }}
  DEPLOY_PATH: "/home/trustaiapp"
  CONFIG_SERVER_HOST: ${{ secrets.REMOTE_HOST }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: üì• Checkout source code
        uses: actions/checkout@v4

      - name: üìÑ Create .env file from secrets
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env

      - name: ‚òï Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 21

      - name: üèóÔ∏è Build the application
        run: mvn -B package -DskipTests --file pom.xml

      - name: üîç Verify build artifacts
        run: ls -l aggregator/target

      - name: ‚öôÔ∏è Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Build & push Aggregator
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: aggregator
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-aggregator:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-aggregator:latest

      - name: üö™ Logout from GHCR
        run: docker logout ${{ env.REGISTRY }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Select image tag
        id: tag
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            echo "val=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "val=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: üîë Load SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üõ°Ô∏è Add host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$REMOTE_SSH_PORT" "$REMOTE_HOST" >> ~/.ssh/known_hosts 2>/dev/null

      - name: üìÑ Copy docker-compose.app.yml to server
        run: |
          scp -P "$REMOTE_SSH_PORT" -o StrictHostKeyChecking=no docker-compose.app.yml $REMOTE_USER@$REMOTE_HOST:$DEPLOY_PATH/

      - name: üöÄ Deploy on remote server
        run: |
          # Precompute the image tag in the GH action shell
          IMAGE_TAG=${{ steps.tag.outputs.val }}

          ssh -p "$REMOTE_SSH_PORT" -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << EOF
            set -e

            # Export environment variables for docker-compose
            export REGISTRY="$REGISTRY"
            export IMAGE_NAME="$IMAGE_NAME"
            export IMAGE_TAG="$IMAGE_TAG"
            export DB_NAME="$DB_NAME"
            export DB_USER="$DB_USER"
            export DB_PASSWORD="$DB_PASSWORD"
            export DB_ROOT_PASSWORD="$DB_ROOT_PASSWORD"

            # Log the image tag being deployed
            echo "Deploying image tag: $IMAGE_TAG"

            echo "üîê Logging in to GHCR..."
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin

            echo "üìÇ Switching to deploy directory: $DEPLOY_PATH"
            cd "$DEPLOY_PATH"

            echo "üìÑ Updating .env variables"
            touch .env
            sed -i "s|^REGISTRY=.*|REGISTRY=$REGISTRY|" .env || echo "REGISTRY=$REGISTRY" >> .env
            sed -i "s|^IMAGE_NAME=.*|IMAGE_NAME=$IMAGE_NAME|" .env || echo "IMAGE_NAME=$IMAGE_NAME" >> .env
            sed -i "s|^IMAGE_TAG=.*|IMAGE_TAG=$IMAGE_TAG|" .env || echo "IMAGE_TAG=$IMAGE_TAG" >> .env
            sed -i "s|^DB_NAME=.*|DB_NAME=$DB_NAME|" .env || echo "DB_NAME=$DB_NAME" >> .env
            sed -i "s|^DB_USER=.*|DB_USER=$DB_USER|" .env || echo "DB_USER=$DB_USER" >> .env
            sed -i "s|^DB_PASSWORD=.*|DB_PASSWORD=$DB_PASSWORD|" .env || echo "DB_PASSWORD=$DB_PASSWORD" >> .env
            sed -i "s|^DB_ROOT_PASSWORD=.*|DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD|" .env || echo "DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD" >> .env


            echo "‚¨áÔ∏è Pulling latest image"
            docker compose -f docker-compose.app.yml pull

            echo "üîÑ Restarting services"
            docker compose -f docker-compose.app.yml up -d app --remove-orphans

            echo "üßπ Cleaning up unused Docker images"
            docker image prune -f
          EOF

        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          GHCR_USER: ${{ env.GHCR_USER }}
          GHCR_PAT: ${{ env.GHCR_PAT }}
          REMOTE_USER: ${{ env.REMOTE_USER }}
          REMOTE_HOST: ${{ env.REMOTE_HOST }}
          REMOTE_SSH_PORT: ${{ env.REMOTE_SSH_PORT }}
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}