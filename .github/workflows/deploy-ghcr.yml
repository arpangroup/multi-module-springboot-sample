name: Deploy (Docker + GHCR)

on:
  push:
    branches: ["main", "fix-14-sept-config-service"]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Override image tag to deploy (default: commit SHA)"
        required: false
        default: ""

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  DEPLOY_PATH: "/home/trustaiapp"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4

      - name: 📄 Create .env file from secrets
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env

      - name: ☕ Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 21

      - name: 🏗️ Build the application
        run: mvn -B package -DskipTests --file pom.xml

      - name: 🔍 Verify build artifacts
        run: ls -l aggregator/target

      - name: ⚙️ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Build & push Config Service
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: config-service
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-config:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-config:latest

      - name: 📦 Build & push Aggregator
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: aggregator
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-aggregator:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-aggregator:latest

      - name: 🚪 Logout from GHCR
        run: docker logout ${{ env.REGISTRY }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      DEPLOY_PATH: "/home/trustaiapp"
      GHCR_USER: ${{ secrets.GHCR_USERNAME }}
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
      REMOTE_USER: ${{ secrets.REMOTE_USER }}
      REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      REMOTE_SSH_PORT: ${{ secrets.REMOTE_SSH_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Select image tag
        id: tag
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            echo "val=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "val=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: 🔑 Load SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🛡️ Add host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$REMOTE_SSH_PORT" "$REMOTE_HOST" >> ~/.ssh/known_hosts 2>/dev/null

      - name: 📄 Upload docker-compose.yml
        run: |
          scp -P "$REMOTE_SSH_PORT" -o StrictHostKeyChecking=no docker-compose.yml $REMOTE_USER@$REMOTE_HOST:$DEPLOY_PATH/

      - name: 📜 Upload deploy.sh script
        run: |
          scp -P "$REMOTE_SSH_PORT" -o StrictHostKeyChecking=no ./scripts/deploy.sh $REMOTE_USER@$REMOTE_HOST:$DEPLOY_PATH/
          ssh -p "$REMOTE_SSH_PORT" $REMOTE_USER@$REMOTE_HOST "chmod +x $DEPLOY_PATH/deploy.sh"

      - name: 🚀 Run deployment script on remote server
        run: |
          ssh -p "$REMOTE_SSH_PORT" -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST \
            "REGISTRY='${{ env.REGISTRY }}' \
             IMAGE_NAME='${{ env.IMAGE_NAME }}' \
             IMAGE_TAG='${{ steps.tag.outputs.val }}' \
             DB_NAME='${{ env.DB_NAME }}' \
             DB_USER='${{ env.DB_USER }}' \
             DB_PASSWORD='${{ env.DB_PASSWORD }}' \
             DB_ROOT_PASSWORD='${{ env.DB_ROOT_PASSWORD }}' \
             GHCR_USER='${{ env.GHCR_USER }}' \
             GHCR_PAT='${{ env.GHCR_PAT }}' \
             DEPLOY_PATH='${{ env.DEPLOY_PATH }}' \
             bash $DEPLOY_PATH/deploy.sh"
